[{"id":"490a67515f99d8181b0d3a14207f422b","title":"Kotlin中的伴生对象和静态方法","content":"在日常的开发中，我们经常使用静态变量和静态方法，在java开发中大家经常遇到，那么在kotlin中应该如何使用静态方法和静态对象呢？\njava中的静态方法public class JavaUtils &#123;\n    public static int sum(int a,int b) &#123;\n        return a + b;\n    &#125;\n\n&#125;\n\nKotlin中的静态方法在kotlin中其实是不支持静态方法和静态成员的，但是kotlin支持全局函数和变量。在学习kotlin的过程中，发现了几种方法可以实现kotlin中的静态方法\n\n静态类：使用object关键字，类中的所有的方法都是静态方法。\nobject Utils &#123;\n    fun sum(a:Int,b:Int):Int &#x3D; a+ b\n    const val FLAG &#x3D; true\n&#125;\n\n使用方式：\nfun main(args: Array&lt;String&gt;) &#123;\n    Utils.sum(1,2)\n    Utils.FLAG\n&#125;\n\n在java中的使用方式：\npublic static void main(String[] args) &#123;\n    Utils.INSTANCE.sum(1,2);\n&#125;\n\n如果我们在java中调用也想和在kotlin中调用方式一样，那么应该如何来写？其实很简单，只需要在kotlin中的静态方法或者静态成员上面添加注解 @JvmStatic  和 @JvmField即可\nobject Utils &#123;\n    @JvmStatic\n    fun sum(a:Int,b:Int):Int &#x3D; a+ b\n    @JvmField\n    var FLAG &#x3D; true\n&#125;\n\n那么在java中的调用方式就和kotlin中完全一致了\npublic static void main(String[] args) &#123;\n    Utils.sum(1,2);\n    Utils.FLAG &#x3D; false;\n&#125;\n\n\n\n\n\n\n\n\n\n\n注意object关键字的特点：\n只有一个实例的类(单例)\n不能自定义构造方法\n可以实现接口、继承父类\n本质上就是单例模式\n\n通过Kotlin中的伴生对象来实现\n在文章的开始说过，在Kotlin中并没有静态类和成员的概念，但是并不是的kotlin中不能实现类似相应的功能。我们可以通过kotlin中的伴生对象来实现，每个类都可以对应一个伴生对象，伴生对象的成员全局独一份，伴生对象的成员类似java中的静态成员。\nclass ManagerConstants &#123;\n    companion object &#123;\n        val isLogin &#x3D; false\n\n        fun sum(a:Int,b:Int):Int &#123;\n            return a + b\n        &#125;\n\n    &#125;\n&#125;\n\n使用方式：\nfun main(args: Array&lt;String&gt;) &#123;\n    ManagerConstants.sum(1,2)\n    ManagerConstants.isLogin\n&#125;\n\njava中的使用方式：\npublic static void main(String[] args) &#123;\n   ManagerConstants.Companion.sum(1,2);\n  ManagerConstants.Companion.isLogin();\n&#125;\n\n和静态类一样如果想要java和kotlin的使用方式一样，需要在kotlin类中的方法和变量上添加注解    @JvmStatic  和  @JvmField即可\nclass ManagerConstants &#123;\n    companion object &#123;\n        @JvmField\n        val isLogin &#x3D; false\n        @JvmStatic\n        fun sum(a:Int,b:Int):Int &#123;\n            return a + b\n        &#125;\n\n    &#125;\n&#125;\n\n那么在java中的使用方式：\npublic static void main(String[] args) &#123;\n   ManagerConstants.sum(1,2);\n   ManagerConstants.isLogin;\n&#125;\n使用包级函数和变量\nKotlin和Java及C#不同的是，可以在包里面直接声明函数。做法和类中是一样的。\n创建一个名为static.kt的文件，然后在文件中直接写方法和变量\n\n使用方式：\nfun main(args: Array&lt;String&gt;) &#123;\n    var intSum &#x3D; sum(1,2)\n    println(kotlinFlag)\n&#125;\n\n在java中的使用方式：\npublic static void main(String[] args) &#123;\n   StaticKt.sum(1,2);\n&#125;\n\n看到这里相信小伙伴对kotlin中的静态方法的写法已经有了基本的理解，最后需要注意的是，在kotlin中使用静态方法的场景建议使用包级函数、成员的方式来实现。\n","slug":"Kotlin中的伴生对象和静态方法","date":"2022-01-13T12:14:10.000Z","categories_index":"Kotlin","tags_index":"学习","author_index":"Joker"},{"id":"26575b0f4017509feff322282ac4930d","title":"测试插入图片文章","content":"测试xxxx\n\n\n\n\n\n","slug":"测试插入图片文章","date":"2022-01-13T01:26:46.000Z","categories_index":"前端","tags_index":"学习","author_index":"Joker"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-01-12T13:38:41.557Z","categories_index":"","tags_index":"","author_index":"Joker"}]